{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyBvqdoCKW5XL4e4r9cK9IV01B_W4tdAxAY\",\n  authDomain: \"hoh-db.firebaseapp.com\",\n  databaseURL: \"https://hoh-db.firebaseio.com\",\n  projectId: \"hoh-db\",\n  storageBucket: \"hoh-db.appspot.com\",\n  messagingSenderId: \"604739400659\",\n  appId: \"1:604739400659:web:b04c60a6ff7223e501b526\",\n  measurementId: \"G-YD3RVBVPJT\"\n};\nexport const createUserProfileDocument = async (userAuth, aditionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const collectionRef = firestore.collection('users');\n  const snapShop = await userRef.get();\n  const collectionSnapshot = await collectionRef.get();\n  console.log({\n    collection: collectionSnapshot.docs.map(doc => doc.data())\n  });\n\n  if (!snapShop.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...aditionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCategoryAndItem = (categoryKey, objectsToAdd) => {};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/edgarbarrientos/ecommerce/ecommerce/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","aditionalData","userRef","firestore","doc","uid","collectionRef","collection","snapShop","get","collectionSnapshot","console","log","docs","map","data","exists","displayName","email","createdAt","Date","set","error","message","addCategoryAndItem","categoryKey","objectsToAdd","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,wBAFC;AAGbC,EAAAA,WAAW,EAAE,+BAHA;AAIbC,EAAAA,SAAS,EAAE,QAJE;AAKbC,EAAAA,aAAa,EAAE,oBALF;AAMbC,EAAAA,iBAAiB,EAAE,cANN;AAObC,EAAAA,KAAK,EAAE,2CAPM;AAQbC,EAAAA,aAAa,EAAE;AARF,CAAf;AAWA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,aAAjB,KAAmC;AACxE,MAAG,CAACD,QAAJ,EAAc;AAEd,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AACA,QAAMC,aAAa,GAAGH,SAAS,CAACI,UAAV,CAAqB,OAArB,CAAtB;AACA,QAAMC,QAAQ,GAAG,MAAMN,OAAO,CAACO,GAAR,EAAvB;AACA,QAAMC,kBAAkB,GAAG,MAAMJ,aAAa,CAACG,GAAd,EAAjC;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY;AAACL,IAAAA,UAAU,EAAEG,kBAAkB,CAACG,IAAnB,CAAwBC,GAAxB,CAA4BV,GAAG,IAAIA,GAAG,CAACW,IAAJ,EAAnC;AAAb,GAAZ;;AAEA,MAAG,CAACP,QAAQ,CAACQ,MAAb,EAAqB;AACjB,UAAM;AAACC,MAAAA,WAAD;AAAcC,MAAAA;AAAd,QAAuBlB,QAA7B;AACA,UAAMmB,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACA,YAAMlB,OAAO,CAACmB,GAAR,CAAY;AACdJ,QAAAA,WADc;AAEdC,QAAAA,KAFc;AAGdC,QAAAA,SAHc;AAId,WAAGlB;AAJW,OAAZ,CAAN;AAMH,KAPD,CAOE,OAAMqB,KAAN,EAAa;AACXX,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAkCU,KAAK,CAACC,OAAxC;AACH;AACJ;;AAED,SAAOrB,OAAP;AACH,CA1BM;AA4BP,OAAO,MAAMsB,kBAAkB,GAAG,CAACC,WAAD,EAAcC,YAAd,KAA+B,CAEhE,CAFM;AAGPrC,QAAQ,CAACsC,aAAT,CAAuBrC,MAAvB;AAEA,OAAO,MAAMsC,IAAI,GAAGvC,QAAQ,CAACuC,IAAT,EAAb;AACP,OAAO,MAAMzB,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB;AAEP,MAAM0B,QAAQ,GAAG,IAAIxC,QAAQ,CAACuC,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAexC,QAAf","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nconst config = {\n  apiKey: \"AIzaSyBvqdoCKW5XL4e4r9cK9IV01B_W4tdAxAY\",\n  authDomain: \"hoh-db.firebaseapp.com\",\n  databaseURL: \"https://hoh-db.firebaseio.com\",\n  projectId: \"hoh-db\",\n  storageBucket: \"hoh-db.appspot.com\",\n  messagingSenderId: \"604739400659\",\n  appId: \"1:604739400659:web:b04c60a6ff7223e501b526\",\n  measurementId: \"G-YD3RVBVPJT\",\n};\n\nexport const createUserProfileDocument = async (userAuth, aditionalData) => {\n    if(!userAuth) return;\n    \n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n    const collectionRef = firestore.collection('users');\n    const snapShop = await userRef.get();\n    const collectionSnapshot = await collectionRef.get();\n    console.log({collection: collectionSnapshot.docs.map(doc => doc.data())})\n\n    if(!snapShop.exists) {\n        const {displayName, email} = userAuth;\n        const createdAt = new Date();\n\n        try {\n            await userRef.set({\n                displayName,\n                email,\n                createdAt,\n                ...aditionalData\n            })\n        } catch(error) {\n            console.log('error creating user',error.message)\n        }\n    }\n\n    return userRef;\n};\n\nexport const addCategoryAndItem = (categoryKey, objectsToAdd) => {\n    \n} \nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: \"select_account\" });\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}